name: Update Caches
on:
  schedule:
    - cron: "37 13 * * SAT"
  workflow_dispatch:
jobs:
  update-caches:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      androidApiVersion: 34
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: ðŸ“¦ðŸ’¥ Cleanup Existing Caches
        run: |
          gh extension install actions/gh-actions-cache
          set +e
          echo "Deleting caches for branch: $BRANCH"
          cacheKeysForBranch=$(gh actions-cache list -R $REPO -B $BRANCH -L 100 | cut -f 1 )
          for cacheKey in $cacheKeysForBranch
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
              echo "Deleted $cacheKey"
          done
          echo "Successfully deleted caches"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
      - name: Extract Gradle Version
        id: gradle-version
        run: |
          GRADLE_VERSION=$(grep -oP "distributionUrl=.*gradle-\K[0-9]+\.[0-9]+(\.[0-9]+)?" gradle/wrapper/gradle-wrapper.properties)
          if [ -z "$GRADLE_VERSION" ]; then
            echo "Unable to find gradle version. Fallback to wrapper"
            echo "gradle_version=wrapper" >> $GITHUB_OUTPUT
          else
            echo "Gradle version: $GRADLE_VERSION"
            echo "gradle_version=$GRADLE_VERSION" >> $GITHUB_OUTPUT
          fi
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: ${{ steps.gradle-version.outputs.gradle_version }}
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
          cache-overwrite-existing: true
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            wrapper
          gradle-home-cache-excludes: |
            .tmp
            .gradle
      - name: Enable KVM group permissions for emulator hardware acceleration
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: ðŸ“± Create AVD and generate snapshot for caching
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.androidApiVersion }}
          target: aosp_atd
          channel: stable
          arch: x86_64
          ram-size: 4096M
          disk-size: 2048M
          force-avd-creation: false
          disable-animations: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: echo "Generated AVD snapshot for caching."
      - name: ðŸš§ Build
        run: ./gradlew assembleDebug
      - name: ðŸ’¾ Save AVD Cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: ${{ runner.os }}-avd-${{ env.androidApiVersion }}
      - name: ðŸ’Œ Send email report
        uses: actions/github-script@v7
        env:
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        with:
          script: |
            const subject = `Github Actions cache status of Jetflix Â¯\\_(ãƒ„)_/Â¯`
            const reportGeneratorScriptPath = '/./.github/scripts/cache-update-report-generator.js'
            const reportGeneratorScript = require(`${process.env.GITHUB_WORKSPACE}${reportGeneratorScriptPath}`)
            const report = await reportGeneratorScript({github, context})
            const mailSenderScriptPath = '/./.github/scripts/report-mail-sender.js'
            const mailSenderScript = require(`${process.env.GITHUB_WORKSPACE}${mailSenderScriptPath}`)
            mailSenderScript(subject, report)
